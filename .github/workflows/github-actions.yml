name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET}}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
  COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
  COGNITO_USER_POOL: ${{ secrets.COGNITO_USER_POOL }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET}}
  CYPRESS_API_KEY: ${{ secrets.CYPRESS_API_KEY }}
jobs:
  Build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checking out Code
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ./app/package-lock.json
      - name: Install Dependencies
        run: npm ci
      - name: Linting Code
        run: npm run lint
      - name: Testing Code
        run: npm run test --if-present
      - name: Building Code
        run: npm run build
  cypress-run:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v5.0.7 # use the explicit version number
        with:
          build: npm run build && npx prisma db push
          start: npm start
          working-directory: ./app
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost
